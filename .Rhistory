library(shiny); runApp('Desktop/Desktop - MacBook Air - 1/CODE/r-stuff/App-1/App-1.R')
install.packages("shiny")
shiny::runApp('Desktop/r-for-operations-2023/mgermai2-HW1')
runApp('Desktop/r-for-operations-2023/mgermai2-HW1')
runApp('Desktop/r-for-operations-2023/mgermai2-HW1')
runApp('Desktop/r-for-operations-2023/mgermai2-HW1')
runApp('Desktop/r-for-operations-2023/mgermai2-HW1')
input = list(
# Date thresholds
dates = c("2017-01-01", "2022-11-01"),
# Max ridership threshold
top = 10,
# Day of the week
day = c("WEEKDAY", "SAT.", "SUN." ) ,
# Mode of transit
mode = "Bus"
)
output = list()
# output$stuff = "Tim!" # for example
# readr uses read_csv() - it formats the data as a tibble(), which lets you see format
d <- read_csv("data/prt-transit.csv") %>%
mutate(month_start = as.Date(month_start))
# TIDYVERSE = post-2016 version of quality coding in R; Hadley Wickham
# suite of packages called the tidyverse
# "tidyverse" (dplyr, readr, purrr, tidyr)
# install.packages("tidyverse")
# because when I say, the 'tidyverse' way to do something, I mean, it uses one of these packages.
d$day_type %>% unique() # base-R style
d %>% select(day_type) %>% distinct() # tidyverse-style
# Pipe or Pipeline %>%
# the meaning of a row is route-month-type
result = d %>%
# filter out by the user-input date range
filter(month_start >= input$dates[1], month_start < input$dates[2] ) %>%
# filter out by the user-input day type
filter(day_type %in% input$day) %>%
# filter out by the user-input mode of transportation
filter(mode %in% input$mode) %>%
# create a new field, id, to serve as what's displayed to the user
mutate(id = paste(route, day_type, month_start, sep = "-")) %>%
# create a new field, total_monthly_riders, to serve as the value plotted against the y-axis
mutate(total_monthly_riders = paste(round(avg_riders * day_count))) %>%
# sort the values by ridership
arrange(desc(avg_riders)) %>%
# grab the top "X" values, as input by the user
slice(0:input$top) %>%
# select the actual data
select(month_start, mode, total_monthly_riders, id, route, day_type)
input = list(
# Date thresholds
dates = c("2017-01-01", "2022-11-01"),
# Max ridership threshold
top = 10,
# Day of the week
day = c("WEEKDAY", "SAT.", "SUN." ) ,
# Mode of transit
mode = "Bus"
)
output = list()
# output$stuff = "Tim!" # for example
# readr uses read_csv() - it formats the data as a tibble(), which lets you see format
d <- read_csv("data/prt-transit.csv") %>%
mutate(month_start = as.Date(month_start))
# TIDYVERSE = post-2016 version of quality coding in R; Hadley Wickham
# suite of packages called the tidyverse
# "tidyverse" (dplyr, readr, purrr, tidyr)
# install.packages("tidyverse")
# because when I say, the 'tidyverse' way to do something, I mean, it uses one of these packages.
d$day_type %>% unique() # base-R style
d %>% select(day_type) %>% distinct() # tidyverse-style
# Pipe or Pipeline %>%
# the meaning of a row is route-month-type
result = d %>%
# filter out by the user-input date range
filter(month_start >= input$dates[1], month_start < input$dates[2] ) %>%
# filter out by the user-input day type
filter(day_type %in% input$day) %>%
# filter out by the user-input mode of transportation
filter(mode %in% input$mode) %>%
# create a new field, id, to serve as what's displayed to the user
mutate(id = paste(route, day_type, month_start, sep = "-")) %>%
# create a new field, total_monthly_riders, to serve as the value plotted against the y-axis
mutate(total_monthly_riders = paste(round(avg_riders * day_count))) %>%
# sort the values by ridership
arrange(desc(avg_riders)) %>%
# grab the top "X" values, as input by the user
slice(0:input$top) %>%
# select the actual data
select(month_start, mode, total_monthly_riders, id, route, day_type)
############ WORKSHOPPING #######################
# FAKE INPUTS
input = list(
# Date thresholds
dates = c("2017-01-01", "2022-11-01"),
# Max ridership threshold
top = 10,
# Day of the week
day = c("WEEKDAY", "SAT.", "SUN." ) ,
# Mode of transit
mode = "Bus"
)
############ WORKSHOPPING #######################
# FAKE INPUTS
input = list(
# Date thresholds
dates = c("2017-01-01", "2022-11-01"),
# Max ridership threshold
top = 10,
# Day of the week
day = c("WEEKDAY", "SAT.", "SUN." ) ,
# Mode of transit
mode = "Bus"
)
############ WORKSHOPPING #######################
# FAKE INPUTS
input = list(
# Date thresholds
dates = c("2017-01-01", "2022-11-01"),
# Max ridership threshold
top = 10,
# Day of the week
day = c("WEEKDAY", "SAT.", "SUN." ) ,
# Mode of transit
mode = "Bus"
)
# readr uses read_csv() - it formats the data as a tibble(), which lets you see format
d <- read_csv("data/prt-transit.csv") %>%
mutate(month_start = as.Date(month_start))
install.packages("palmerpenguins")
ggplot(
data = palmerpenguins,
mapping = aes()
)
ggplot(
data = palmerpenguins,
mapping = aes()
)
ggplot(
data = "palmerpenguins",
mapping = aes()
)
ggplot(
data = 'palmerpenguins',
mapping = aes()
)
ggplot(
data = penguins,
mapping = aes()
)
ggplot(
penguins,
mapping = aes()
)
ggplot(
palmerpenguins,
mapping = aes()
)
`.
#> Warning: Removed 2 rows containing non-finite values (stat_bin).
# # IDEAS:
head(penguins)
# # IDEAS:
head(penguins)
head(mtcars)
shiny::runApp('Desktop/r-for-operations-2023/mgermai2-HW2')
setwd("~/Desktop/r-for-operations-2023/mgermai2-HW2")
runApp()
